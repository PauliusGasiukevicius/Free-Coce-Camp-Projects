{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Article","article","onClick","window","open","pageid","className","title","dangerouslySetInnerHTML","__html","snippet","App","useState","articles","setArticles","id","type","placeholder","aria-label","txt","document","getElementById","value","console","log","url","params","action","list","srsearch","format","props","Object","keys","forEach","key","fetch","then","r","json","query","search","catch","e","searchArticles","location","href","map","a","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kSAGA,SAASA,EAAT,GAA8B,IAAXC,EAAU,EAAVA,QACjB,OACE,yBAAKC,QAAS,kBAAMC,OAAOC,KAAK,mCAAqCH,EAAQI,OAAQ,WACrFC,UAAU,qCACV,yBAAKA,UAAU,eAAeL,EAAQM,OACtC,yBAAKD,UAAU,0BACb,uBAAGA,UAAU,YAAYE,wBAAyB,CAACC,OAAQR,EAAQS,aAqD1DC,MA/Cf,WAAgB,IAAD,EAEkBC,mBAAS,IAF3B,mBAENC,EAFM,KAEGC,EAFH,KA4Bb,OACE,6BACA,yBAAKR,UAAU,8DACb,yBAAKA,UAAY,oHACb,2BAAOS,GAAG,MAAMT,UAAU,+EAA+EU,KAAK,SAASC,YAAY,sBAAsBC,aAAW,WACpK,4BAAQhB,QAAS,kBA7BJ,WACnB,IAAIiB,EAAMC,SAASC,eAAe,OAAOC,MACzCC,QAAQC,IAAIL,GACZ,IAAIM,EAAM,qCAENC,EAAS,CACTC,OAAQ,QACRC,KAAM,SACNC,SAAUV,EACVW,OAAQ,OACRC,MAAO,QAGXN,GAAY,YACZO,OAAOC,KAAKP,GAAQQ,SAAQ,SAASC,GAAKV,GAAO,IAAMU,EAAM,IAAMT,EAAOS,MAC1EC,MAAMX,GACLY,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAC,GACJf,QAAQC,IAAIc,GACZxB,EAAYwB,EAAEE,MAAMC,WAErBC,OAAM,SAAAC,GAAC,OAAIpB,QAAQC,IAAImB,MAQGC,IAAkBtC,UAAU,2CAA2CU,KAAK,UACjG,uBAAGV,UAAU,kBACb,4BAAQJ,QAAS,WAAKC,OAAO0C,SAASC,KAAK,gDAAiDxC,UAAU,+BAAtG,8BAGJ,yBAAKA,UAAU,8DAEbO,EAASkC,KAAI,SAAAC,GAAC,OAAI,kBAAChD,EAAD,CAAUC,QAAS+C,EAAGb,IAAK,MAAQa,EAAE3C,eC3C3C4C,QACW,cAA7B9C,OAAO0C,SAASK,UAEe,UAA7B/C,OAAO0C,SAASK,UAEhB/C,OAAO0C,SAASK,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjC,SAASC,eAAe,SD6H3C,kBAAmBiC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdhB,OAAM,SAAAiB,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.4358c798.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nfunction Article ({article}) {\n  return (\n    <div onClick={() => window.open(\"https://en.wikipedia.org/?curid=\" + article.pageid, \"_blank\")} \n    className=\"card border-success mb-3 btn w-75\">\n    <div className=\"card-header\">{article.title}</div>\n    <div className=\"card-body text-success\">\n      <p className=\"card-text\" dangerouslySetInnerHTML={{__html: article.snippet}}></p>\n    </div>\n    </div>\n  );\n}\n\nfunction App() {\n\n  const [articles,setArticles] = useState([]);\n\n  let searchArticles = () => {\n    let txt = document.getElementById(\"txt\").value;\n    console.log(txt);\n    let url = \"https://en.wikipedia.org/w/api.php\"; \n\n    let params = {\n        action: \"query\",\n        list: \"search\",\n        srsearch: txt,\n        format: \"json\",\n        props: \"info\"\n    };\n\n    url = url + \"?origin=*\";\n    Object.keys(params).forEach(function(key){url += \"&\" + key + \"=\" + params[key];});\n    fetch(url)\n    .then(r => r.json())\n    .then(r => {\n      console.log(r);\n      setArticles(r.query.search);\n    })\n    .catch(e => console.log(e));\n  }\n\n  return (\n    <div>\n    <div className=\"App h-100 d-flex align-items-center justify-content-center\">\n      <div className = \"input-group form-inline justify-content-center align-items-center w-75 m-2 align-self-center justify-self-center\">\n          <input id=\"txt\" className=\"w-100 ml-auto justify-content-center align-items-center form-control mr-sm-2\" type=\"search\" placeholder=\"Search for articles\" aria-label=\"Search\"/>\n          <button onClick={()=>searchArticles()} className=\"m-1 btn btn-outline-success my-2 my-md-0\" type=\"submit\">\n          <i className=\"fa fa-search\"></i></button>\n          <button onClick={()=>{window.location.href=\"https://en.wikipedia.org/wiki/Special:Random\"}} className=\"m-1 btn btn-outline-success\">Random wikipedia article</button>\n      </div>\n      </div>\n      <div className=\"d-flex align-items-center justify-content-center flex-wrap\">\n      {\n        articles.map(a => <Article  article={a} key={\"wat\" + a.pageid} />)\n      }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}